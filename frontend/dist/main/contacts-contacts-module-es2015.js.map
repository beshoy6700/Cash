{"version":3,"sources":["./src/app/contacts/contacts-routing.module.ts","./src/app/contacts/contacts.module.ts","./src/app/contacts/contacts.model.ts","./src/app/contacts/contacts.component.sass","./src/app/contacts/form/form.component.ts","./src/app/contacts/delete/delete.component.ts","./src/app/contacts/delete/delete.component.html","./src/app/contacts/form/form.component.sass","./src/app/contacts/contacts.component.ts","./src/app/contacts/form/form.component.html","./src/app/contacts/delete/delete.component.sass","./src/app/contacts/contacts.service.ts","./src/app/contacts/contacts.component.html"],"names":[],"mappings":"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","file":"contacts-contacts-module-es2015.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { ContactsComponent } from \"./contacts.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: ContactsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdvanceTableRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AdvanceTableRoutingModule } from \"./contacts-routing.module\";\r\nimport { ContactsComponent } from \"./contacts.component\";\r\nimport { FormComponent as contactForm } from \"./form/form.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\n\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\n\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MaterialFileInputModule } from \"ngx-material-file-input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { ContactsService } from \"./contacts.service\";\r\n\r\n@NgModule({\r\n  declarations: [ContactsComponent, contactForm, DeleteComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AdvanceTableRoutingModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatSortModule,\r\n    MatToolbarModule,\r\n    MaterialFileInputModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  providers: [ContactsService],\r\n})\r\nexport class ContactsModule {}\r\n","import { formatDate } from \"@angular/common\";\r\nexport class Contacts {\r\n  id: number;\r\n  img: string;\r\n  name: string;\r\n  email: string;\r\n  birthDate: string;\r\n  mobile: string;\r\n  address: string;\r\n  note: string;\r\n\r\n  constructor(contacts) {\r\n    {\r\n      this.id = contacts.id || this.getRandomID();\r\n      this.img = contacts.avatar || \"assets/images/user/usrbig1.jpg\";\r\n      this.name = contacts.name || \"\";\r\n      this.email = contacts.email || \"\";\r\n      this.birthDate = formatDate(new Date(), \"yyyy-MM-dd\", \"en\") || \"\";\r\n      this.address = contacts.address || \"\";\r\n      this.mobile = contacts.mobile || \"\";\r\n      this.note = contacts.note || \"\";\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250YWN0cy5jb21wb25lbnQuc2FzcyJ9 */\";","import { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Component, Inject } from \"@angular/core\";\r\nimport { ContactsService } from \"../contacts.service\";\r\nimport {\r\n  FormControl,\r\n  Validators,\r\n  FormGroup,\r\n  FormBuilder,\r\n} from \"@angular/forms\";\r\nimport { Contacts } from \"../contacts.model\";\r\nimport { formatDate } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: \"app-form\",\r\n  templateUrl: \"./form.component.html\",\r\n  styleUrls: [\"./form.component.sass\"],\r\n})\r\nexport class FormComponent {\r\n  action: string;\r\n  dialogTitle: string;\r\n  isDetails = false;\r\n  contactsForm: FormGroup;\r\n  contacts: Contacts;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    // Set the defaults\r\n    this.action = data.action;\r\n    if (this.action === \"edit\") {\r\n      this.isDetails = false;\r\n      this.dialogTitle = data.contacts.name;\r\n      this.contacts = data.contacts;\r\n      this.contactsForm = this.createContactForm();\r\n    } else if (this.action === \"details\") {\r\n      this.contacts = data.contacts;\r\n      this.isDetails = true;\r\n    } else {\r\n      this.isDetails = false;\r\n      this.dialogTitle = \"New Contacts\";\r\n      this.contacts = new Contacts({});\r\n      this.contactsForm = this.createContactForm();\r\n    }\r\n  }\r\n  formControl = new FormControl(\"\", [\r\n    Validators.required,\r\n    // Validators.email,\r\n  ]);\r\n  getErrorMessage() {\r\n    return this.formControl.hasError(\"required\")\r\n      ? \"Required field\"\r\n      : this.formControl.hasError(\"email\")\r\n      ? \"Not a valid email\"\r\n      : \"\";\r\n  }\r\n  createContactForm(): FormGroup {\r\n    return this.fb.group({\r\n      id: [this.contacts.id],\r\n      img: [this.contacts.img],\r\n      name: [this.contacts.name],\r\n      email: [\r\n        this.contacts.email,\r\n        [Validators.required, Validators.email, Validators.minLength(5)],\r\n      ],\r\n      birthDate: [\r\n        formatDate(this.contacts.birthDate, \"yyyy-MM-dd\", \"en\"),\r\n        [Validators.required],\r\n      ],\r\n      address: [this.contacts.address],\r\n      mobile: [this.contacts.mobile],\r\n      note: [this.contacts.note],\r\n    });\r\n  }\r\n  submit() {\r\n    // emppty stuff\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  public confirmAdd(): void {\r\n    this.contactsService.addContacts(this.contactsForm.getRawValue());\r\n  }\r\n}\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Component, Inject } from \"@angular/core\";\r\nimport { ContactsService } from \"../contacts.service\";\r\n\r\n@Component({\r\n  selector: \"app-delete\",\r\n  templateUrl: \"./delete.component.html\",\r\n  styleUrls: [\"./delete.component.sass\"],\r\n})\r\nexport class DeleteComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService\r\n  ) {}\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  confirmDelete(): void {\r\n    this.contactsService.deleteContacts(this.data.id);\r\n  }\r\n}\r\n","export default \"<div class=\\\"container\\\">\\r\\n  <h3 mat-dialog-title>Are you sure?</h3>\\r\\n  <div mat-dialog-content>\\r\\n    <ul class=\\\"clearfix\\\">\\r\\n      <li>\\r\\n        <p><span class=\\\"font-weight-bold\\\"> Name: </span>{{data.name}}</p>\\r\\n      </li>\\r\\n      <li>\\r\\n        <p><span class=\\\"font-weight-bold\\\"> Email: </span>{{ data.email }}</p>\\r\\n      </li>\\r\\n      <li>\\r\\n        <p>\\r\\n          <span class=\\\"font-weight-bold\\\">Mobile: </span>{{data.mobile}}\\r\\n        </p>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n  <div mat-dialog-actions class=\\\"mb-1\\\">\\r\\n    <button mat-flat-button color=\\\"warn\\\" [mat-dialog-close]=\\\"1\\\" (click)=\\\"confirmDelete()\\\">\\r\\n      Delete\\r\\n    </button>\\r\\n    <button mat-flat-button (click)=\\\"onNoClick()\\\" tabindex=\\\"-1\\\">Cancel</button>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3JtLmNvbXBvbmVudC5zYXNzIn0= */\";","import { Component, ElementRef, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ContactsService } from \"./contacts.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\nimport { Contacts } from \"./contacts.model\";\r\nimport { DataSource } from \"@angular/cdk/collections\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { BehaviorSubject, fromEvent, merge, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { MatMenuTrigger } from \"@angular/material/menu\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\nimport { FormComponent } from \"./form/form.component\";\r\nimport { DeleteComponent } from \"./delete/delete.component\";\r\n\r\n@Component({\r\n  selector: \"app-contacts\",\r\n  templateUrl: \"./contacts.component.html\",\r\n  styleUrls: [\"./contacts.component.sass\"],\r\n})\r\nexport class ContactsComponent implements OnInit {\r\n  filterToggle = false;\r\n  displayedColumns = [\r\n    \"select\",\r\n    \"img\",\r\n    \"name\",\r\n    \"email\",\r\n    \"mobile\",\r\n    \"birthDate\",\r\n    \"address\",\r\n    \"actions\",\r\n  ];\r\n  exampleDatabase: ContactsService | null;\r\n  dataSource: ExampleDataSource | null;\r\n  selection = new SelectionModel<Contacts>(true, []);\r\n  id: number;\r\n  contacts: Contacts | null;\r\n  constructor(\r\n    public httpClient: HttpClient,\r\n    public dialog: MatDialog,\r\n    public contactsService: ContactsService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild(\"filter\", { static: true }) filter: ElementRef;\r\n  @ViewChild(MatMenuTrigger)\r\n  contextMenu: MatMenuTrigger;\r\n  contextMenuPosition = { x: \"0px\", y: \"0px\" };\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n  refresh() {\r\n    this.loadData();\r\n  }\r\n  addNew() {\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: this.contacts,\r\n        action: \"add\",\r\n      },\r\n      direction: tempDirection,\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // After dialog is closed we're doing frontend updates\r\n        // For add we're just pushing a new row inside DataServicex\r\n        this.exampleDatabase.dataChange.value.unshift(\r\n          this.contactsService.getDialogData()\r\n        );\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"snackbar-success\",\r\n          \"Add Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  detailsCall(row) {\r\n    this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: \"details\",\r\n      },\r\n      height: \"70%\",\r\n      width: \"35%\",\r\n    });\r\n  }\r\n  toggleStar(row) {\r\n    console.log(row);\r\n  }\r\n  editCall(row) {\r\n    this.id = row.id;\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: \"edit\",\r\n      },\r\n      direction: tempDirection,\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // When using an edit things are little different, firstly we find record inside DataService by id\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // Then you update that record using data from dialogData (values you enetered)\r\n        this.exampleDatabase.dataChange.value[foundIndex] =\r\n          this.contactsService.getDialogData();\r\n        // And lastly refresh table\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"black\",\r\n          \"Edit Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  deleteItem(row) {\r\n    this.id = row.id;\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    const dialogRef = this.dialog.open(DeleteComponent, {\r\n      data: row,\r\n      direction: tempDirection,\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // for delete we use splice in order to remove single object from DataService\r\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          \"snackbar-danger\",\r\n          \"Delete Record Successfully...!!!\",\r\n          \"bottom\",\r\n          \"center\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  private refreshTable() {\r\n    this.paginator._changePageSize(this.paginator.pageSize);\r\n  }\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedData.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.dataSource.renderedData.forEach((row) =>\r\n          this.selection.select(row)\r\n        );\r\n  }\r\n  removeSelectedRows() {\r\n    const totalSelect = this.selection.selected.length;\r\n    this.selection.selected.forEach((item) => {\r\n      const index: number = this.dataSource.renderedData.findIndex(\r\n        (d) => d === item\r\n      );\r\n      // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\r\n      this.exampleDatabase.dataChange.value.splice(index, 1);\r\n      this.refreshTable();\r\n      this.selection = new SelectionModel<Contacts>(true, []);\r\n    });\r\n    this.showNotification(\r\n      \"snackbar-danger\",\r\n      totalSelect + \" Record Delete Successfully...!!!\",\r\n      \"bottom\",\r\n      \"center\"\r\n    );\r\n  }\r\n  public loadData() {\r\n    this.exampleDatabase = new ContactsService(this.httpClient);\r\n    this.dataSource = new ExampleDataSource(\r\n      this.exampleDatabase,\r\n      this.paginator,\r\n      this.sort\r\n    );\r\n    fromEvent(this.filter.nativeElement, \"keyup\").subscribe(() => {\r\n      if (!this.dataSource) {\r\n        return;\r\n      }\r\n      this.dataSource.filter = this.filter.nativeElement.value;\r\n    });\r\n  }\r\n  showNotification(colorName, text, placementFrom, placementAlign) {\r\n    this.snackBar.open(text, \"\", {\r\n      duration: 2000,\r\n      verticalPosition: placementFrom,\r\n      horizontalPosition: placementAlign,\r\n      panelClass: colorName,\r\n    });\r\n  }\r\n}\r\nexport class ExampleDataSource extends DataSource<Contacts> {\r\n  filterChange = new BehaviorSubject(\"\");\r\n  get filter(): string {\r\n    return this.filterChange.value;\r\n  }\r\n  set filter(filter: string) {\r\n    this.filterChange.next(filter);\r\n  }\r\n  filteredData: Contacts[] = [];\r\n  renderedData: Contacts[] = [];\r\n  constructor(\r\n    public exampleDatabase: ContactsService,\r\n    public paginator: MatPaginator,\r\n    public _sort: MatSort\r\n  ) {\r\n    super();\r\n    // Reset to the first page when the user changes the filter.\r\n    this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n  }\r\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\r\n  connect(): Observable<Contacts[]> {\r\n    // Listen for any changes in the base data, sorting, filtering, or pagination\r\n    const displayDataChanges = [\r\n      this.exampleDatabase.dataChange,\r\n      this._sort.sortChange,\r\n      this.filterChange,\r\n      this.paginator.page,\r\n    ];\r\n    this.exampleDatabase.getAllContactss();\r\n    return merge(...displayDataChanges).pipe(\r\n      map(() => {\r\n        // Filter data\r\n        this.filteredData = this.exampleDatabase.data\r\n          .slice()\r\n          .filter((contacts: Contacts) => {\r\n            const searchStr = (\r\n              contacts.name +\r\n              contacts.birthDate +\r\n              contacts.email +\r\n              contacts.mobile +\r\n              contacts.address\r\n            ).toLowerCase();\r\n            return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n          });\r\n        // Sort filtered data\r\n        const sortedData = this.sortData(this.filteredData.slice());\r\n        // Grab the page's slice of the filtered sorted data.\r\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n        this.renderedData = sortedData.splice(\r\n          startIndex,\r\n          this.paginator.pageSize\r\n        );\r\n        return this.renderedData;\r\n      })\r\n    );\r\n  }\r\n  disconnect() {}\r\n  /** Returns a sorted copy of the database data. */\r\n  sortData(data: Contacts[]): Contacts[] {\r\n    if (!this._sort.active || this._sort.direction === \"\") {\r\n      return data;\r\n    }\r\n    return data.sort((a, b) => {\r\n      let propertyA: number | string = \"\";\r\n      let propertyB: number | string = \"\";\r\n      switch (this._sort.active) {\r\n        case \"id\":\r\n          [propertyA, propertyB] = [a.id, b.id];\r\n          break;\r\n        case \"name\":\r\n          [propertyA, propertyB] = [a.name, b.name];\r\n          break;\r\n        case \"email\":\r\n          [propertyA, propertyB] = [a.email, b.email];\r\n          break;\r\n        case \"birthDate\":\r\n          [propertyA, propertyB] = [a.birthDate, b.birthDate];\r\n          break;\r\n        case \"address\":\r\n          [propertyA, propertyB] = [a.address, b.address];\r\n          break;\r\n      }\r\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\r\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\r\n      return (\r\n        (valueA < valueB ? -1 : 1) * (this._sort.direction === \"asc\" ? 1 : -1)\r\n      );\r\n    });\r\n  }\r\n}\r\n","export default \"<div class=\\\"addContainer\\\">\\r\\n  <div *ngIf=\\\"!isDetails\\\" class=\\\"contact-form\\\">\\r\\n    <div class=\\\"modalHeader\\\">\\r\\n      <div class=\\\"editRowModal\\\">\\r\\n        <div class=\\\"modalHeader clearfix\\\">\\r\\n          <img [src]='contacts.img' alt=\\\"avatar\\\">\\r\\n          <div class=\\\"modal-about\\\">\\r\\n            <div class=\\\"font-weight-bold p-t-5 msl-3 font-17\\\">\\r\\n              {{dialogTitle}}</div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <button mat-icon-button (click)=\\\"dialogRef.close()\\\" aria-label=\\\"Close dialog\\\">\\r\\n        <mat-icon>close</mat-icon>\\r\\n      </button>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n      <form class=\\\"register-form m-4\\\" [formGroup]=\\\"contactsForm\\\" (ngSubmit)=\\\"submit\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Name</mat-label>\\r\\n              <input matInput formControlName=\\\"name\\\" required>\\r\\n              <i class=\\\"material-icons-two-tone color-icon\\\" matSuffix>face</i>\\r\\n              <mat-error *ngIf=\\\"contactsForm.get('name').hasError('required')\\\">\\r\\n                Name is required\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Email</mat-label>\\r\\n              <input matInput formControlName=\\\"email\\\" required>\\r\\n              <i class=\\\"material-icons-two-tone color-icon\\\" matSuffix>email</i>\\r\\n              <mat-error *ngIf=\\\"contactsForm.get('email').hasError('required') || contactsForm.get('email').touched\\\">\\r\\n                Please enter a valid email address\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Mobile</mat-label>\\r\\n              <input matInput formControlName=\\\"mobile\\\" type=\\\"number\\\">\\r\\n              <i class=\\\"material-icons-two-tone color-icon\\\" matSuffix>smartphone</i>\\r\\n              <mat-error *ngIf=\\\"contactsForm.get('mobile').hasError('required')\\\">\\r\\n                Mobile is required\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Birth date</mat-label>\\r\\n              <input matInput [matDatepicker]=\\\"picker\\\" formControlName=\\\"birthDate\\\">\\r\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n              <mat-datepicker #picker></mat-datepicker>\\r\\n              <mat-error *ngIf=\\\"contactsForm.get('birthDate').hasError('required')\\\">\\r\\n                Please select date\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Address</mat-label>\\r\\n              <textarea matInput formControlName=\\\"address\\\"></textarea>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <mat-form-field class=\\\"example-full-width mb-3\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Note</mat-label>\\r\\n              <textarea matInput formControlName=\\\"note\\\"></textarea>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\\\">\\r\\n            <div class=\\\"example-button-row\\\">\\r\\n              <button mat-raised-button color=\\\"primary\\\" [type]=\\\"submit\\\" [disabled]=\\\"!contactsForm.valid\\\"\\r\\n                [mat-dialog-close]=\\\"1\\\" (click)=\\\"confirmAdd()\\\">Save</button>\\r\\n              <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onNoClick()\\\" tabindex=\\\"-1\\\">Cancel</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"isDetails\\\" class=\\\"contact-details\\\">\\r\\n    <div class=\\\"modalHeader\\\">\\r\\n      <div class=\\\"editRowModal\\\">\\r\\n        <div class=\\\"modalHeader clearfix\\\">\\r\\n          <div class=\\\"modal-about contact-header\\\">\\r\\n            <div class=\\\"contact-details-img\\\">\\r\\n              <img [src]='contacts.img' alt=\\\"avatar\\\">\\r\\n            </div>\\r\\n            <div class=\\\"contact-details-heading\\\">\\r\\n              <div class=\\\"contact-details-name mb-2\\\">{{contacts.name}}</div>\\r\\n              <div class=\\\"badge col-green\\\">Friends</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <button mat-icon-button (click)=\\\"dialogRef.close()\\\" aria-label=\\\"Close dialog\\\">\\r\\n        <mat-icon>close</mat-icon>\\r\\n      </button>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n      <mat-card-content>\\r\\n        <div class=\\\"contact-details-field\\\">\\r\\n          <i class=\\\"material-icons-two-tone color-icon\\\">email</i>\\r\\n          <div class=\\\"contact-detail-info\\\"> {{contacts.email}}\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"contact-details-field\\\">\\r\\n          <i class=\\\"material-icons-two-tone color-icon\\\">phonelink_ring</i>\\r\\n          <div class=\\\"contact-detail-info\\\"> {{contacts.mobile}}\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"contact-details-field\\\">\\r\\n          <i class=\\\"material-icons-two-tone color-icon\\\">cake</i>\\r\\n          <div class=\\\"contact-detail-info\\\"> {{contacts.birthDate | date: 'MMMM d, yyyy'}}\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"contact-details-field\\\">\\r\\n          <i class=\\\"material-icons-two-tone color-icon\\\">location_on</i>\\r\\n          <div class=\\\"contact-detail-info\\\"> {{contacts.address}}\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"contact-details-field\\\">\\r\\n          <i class=\\\"material-icons-two-tone color-icon\\\">note</i>\\r\\n          <div class=\\\"contact-detail-info\\\"> {{contacts.note}}\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card-content>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkZWxldGUuY29tcG9uZW50LnNhc3MifQ== */\";","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { Contacts } from \"./contacts.model\";\r\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\n@Injectable()\r\nexport class ContactsService {\r\n  private readonly API_URL = \"assets/data/contacts.json\";\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Contacts[]> = new BehaviorSubject<Contacts[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  constructor(private httpClient: HttpClient) {}\r\n  get data(): Contacts[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllContactss(): void {\r\n    this.httpClient.get<Contacts[]>(this.API_URL).subscribe(\r\n      (data) => {\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(data);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.isTblLoading = false;\r\n        console.log(error.name + \" \" + error.message);\r\n      }\r\n    );\r\n  }\r\n  addContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /*  this.httpClient.post(this.API_URL, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /* this.httpClient.put(this.API_URL + contacts.id, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteContacts(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n","export default \"<section class=\\\"content\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"block-header\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 col-sm-12 col-md-12 col-lg-12\\\">\\r\\n          <ul class=\\\"breadcrumb breadcrumb-style \\\">\\r\\n            <li class=\\\"breadcrumb-item\\\">\\r\\n              <h4 class=\\\"page-title\\\">All Contacts</h4>\\r\\n            </li>\\r\\n            <li class=\\\"breadcrumb-item bcrumb-1\\\">\\r\\n              <a href=\\\"#\\\" onClick=\\\"return false;\\\">\\r\\n                <i class=\\\"fas fa-home\\\"></i> Home</a>\\r\\n            </li>\\r\\n            <li class=\\\"breadcrumb-item bcrumb-2\\\">\\r\\n              <a href=\\\"#\\\" onClick=\\\"return false;\\\">Contacts</a>\\r\\n            </li>\\r\\n            <li class=\\\"breadcrumb-item active\\\">All</li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12\\\">\\r\\n        <div class=\\\"tabbable-line\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n              <div class=\\\"card\\\">\\r\\n                <div class=\\\"body\\\">\\r\\n                  <div class=\\\"table-responsive\\\">\\r\\n                    <div class=\\\"materialTableHeader\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-8\\\">\\r\\n                          <ul class=\\\"header-buttons-left ms-0\\\">\\r\\n                            <li class=\\\"dropdown\\\">\\r\\n                              <h2>\\r\\n                                <strong>Contacts</strong></h2>\\r\\n                            </li>\\r\\n                            <li class=\\\"dropdown m-l-20\\\">\\r\\n                              <label for=\\\"search-input\\\"><i class=\\\"material-icons search-icon\\\">search</i></label>\\r\\n                              <input placeholder=\\\"Search\\\" type=\\\"text\\\" #filter class=\\\"browser-default search-field\\\"\\r\\n                                aria-label=\\\"Search box\\\">\\r\\n                            </li>\\r\\n                            <li>\\r\\n                              <div class=\\\"icon-button-demo m-l-10\\\" [hidden]=!selection.hasValue()>\\r\\n                                <button mat-mini-fab color=\\\"warn\\\" (click)=\\\"removeSelectedRows()\\\">\\r\\n                                  <mat-icon class=\\\"col-white\\\">delete\\r\\n                                  </mat-icon>\\r\\n                                </button>\\r\\n                              </div>\\r\\n                            </li>\\r\\n                          </ul>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-4\\\">\\r\\n                          <ul class=\\\"header-buttons\\\">\\r\\n                            <li>\\r\\n                              <div class=\\\"icon-button-demo\\\">\\r\\n                                <button mat-mini-fab color=\\\"primary\\\" (click)=\\\"addNew()\\\">\\r\\n                                  <mat-icon class=\\\"col-white\\\">add</mat-icon>\\r\\n                                </button>\\r\\n                              </div>\\r\\n                            </li>\\r\\n                            <li>\\r\\n                              <div class=\\\"icon-button-demo\\\">\\r\\n                                <button mat-mini-fab color=\\\"primary\\\" (click)=\\\"refresh()\\\">\\r\\n                                  <mat-icon class=\\\"col-white\\\">refresh\\r\\n                                  </mat-icon>\\r\\n                                </button>\\r\\n                              </div>\\r\\n                            </li>\\r\\n                          </ul>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <mat-table #table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-cell\\\">\\r\\n                      <!-- Checkbox Column -->\\r\\n                      <ng-container matColumnDef=\\\"select\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef [ngClass]=\\\"'tbl-col-width-per-6'\\\">\\r\\n                          <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\r\\n                            [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\r\\n                            [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\" [ngClass]=\\\"'tbl-checkbox'\\\">\\r\\n                          </mat-checkbox>\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\" [ngClass]=\\\"'tbl-col-width-per-6'\\\">\\r\\n                          <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\r\\n                            (change)=\\\"$event ? selection.toggle(row) : null\\\" [checked]=\\\"selection.isSelected(row)\\\"\\r\\n                            [ngClass]=\\\"'tbl-checkbox'\\\">\\r\\n                          </mat-checkbox>\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <!-- ID Column -->\\r\\n                      <ng-container matColumnDef=\\\"id\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Id\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"img\\\">\\r\\n                        <mat-header-cell mat-header-cell *matHeaderCellDef [ngClass]=\\\"'tbl-col-width-per-6'\\\"> Image\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell mat-cell *matCellDef=\\\"let row\\\" class=\\\"table-img tbl-col-width-per-6\\\"> <img\\r\\n                            [src]=\\\"row.img\\\" />\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"name\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Name\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.name}}\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"mobile\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Mobile\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.mobile}}\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"email\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.email}}\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"birthDate\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Birth Date\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                          {{row.birthDate | date: 'MM/dd/yyyy'}}</mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"address\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Address\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\" class=\\\"column-nowrap\\\"> {{row.address}}\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <ng-container matColumnDef=\\\"note\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Note\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.note}}\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n                      <!-- actions -->\\r\\n                      <ng-container matColumnDef=\\\"actions\\\">\\r\\n                        <mat-header-cell class=\\\"pl-3 tbl-col-width-per-10\\\" *matHeaderCellDef>Actions\\r\\n                        </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row; let i=index;\\\" class=\\\"pl-3 tbl-col-width-per-10\\\">\\r\\n                          <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" (click)=\\\"$event.stopPropagation()\\\">\\r\\n                            <mat-icon>more_vert</mat-icon>\\r\\n                          </button>\\r\\n                          <mat-menu #menu=\\\"matMenu\\\">\\r\\n                            <button mat-menu-item (click)=\\\"editCall(row)\\\">\\r\\n                              <i class=\\\"material-icons-two-tone align-middle msr-2\\\">create</i>\\r\\n                              <span>Edit Contact</span>\\r\\n                            </button>\\r\\n                            <button mat-menu-item (click)=\\\"deleteItem(row)\\\">\\r\\n                              <i class=\\\"material-icons-two-tone align-middle msr-2\\\">delete_forever</i>\\r\\n                              <span>Delete Contact</span>\\r\\n                            </button>\\r\\n                          </mat-menu>\\r\\n                        </mat-cell>\\r\\n                      </ng-container>\\r\\n\\r\\n                      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\">\\r\\n                      </mat-header-row>\\r\\n                      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (click)=\\\"detailsCall(row)\\\"\\r\\n                        [style.cursor]=\\\"'pointer'\\\" matRipple>\\r\\n                      </mat-row>\\r\\n                    </mat-table>\\r\\n                    <!-- Loading spinner -->\\r\\n                    <div *ngIf=\\\"exampleDatabase.isTblLoading\\\" class=\\\"tbl-spinner\\\">\\r\\n                      <mat-progress-spinner color=\\\"primary\\\" [diameter]=\\\"40\\\" mode=\\\"indeterminate\\\">\\r\\n                      </mat-progress-spinner>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!exampleDatabase.isTblLoading\\\" class=\\\"no-results\\\"\\r\\n                      [style.display]=\\\"dataSource.renderedData.length == 0 ? '' : 'none'\\\">\\r\\n                      No results\\r\\n                    </div>\\r\\n                    <mat-paginator #paginator [length]=\\\"dataSource.filteredData.length\\\" [pageIndex]=\\\"0\\\" [pageSize]=\\\"10\\\"\\r\\n                      [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\">\\r\\n                    </mat-paginator>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\";"],"sourceRoot":"webpack:///"}